name: python-deployment

run-name: ${{ github.actor }} - ${{ github.ref_name}} -${{ github.sha }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      artifact:
        description: 'Select artifacts to deploy'
        required: true
        type: choice
        options: ['python-artifacts-3.8-ubuntu-latest', 'python-artifacts-3.9-ubuntu-latest', 'python-artifacts-3.8-windows-latest', 'python-artifacts-3.9-windows-latest', 'none']
        default: 'none'

env:
  PythonVersion: 3.8
  DockerImageName: todoapp

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  python-ci:
    strategy:
      matrix:
        python-version: [3.8, 3.9]
        os: [ubuntu-latest, windows-latest]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
    
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage flake8
          pip install -r requirements.txt    
      - name: Run tests
        run: |
          python manage.py test

      - name: Generate Report
        run: |
          coverage run --source='.' manage.py test
          coverage report
      - name: Linting
        run: |
          flake8 . --show-source --statistics --exit-zero
      - name: Check Complexity
        run: |
          flake8 . --exit-zero --max-complexity=6
      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts-${{ matrix.python-version }}-${{ matrix.os }}
          path: .
  
  docker-ci:
    name: Build and Push Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' && github.event.inputs.artifact != 'none'}}
    needs: python-ci
    steps:

    - uses: actions/download-artifact@v4
      name: Download python artifacts
      with:
        name: ${{ github.event.inputs.artifact }}
        path: .

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        context: .
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DockerImageName }}:${{ github.sha }}

  helm-ci:
    runs-on: ubuntu-latest
    needs: python-ci
    if: ${{ github.ref_name == 'main' && github.event.inputs.artifact != 'none'}}

    name: Helm CI
    steps:

    - uses: actions/download-artifact@v4
      with:
        name: ${{ github.event.inputs.artifact }}
        path: .

    - name: Set Up Helm
      uses: azure/setup-helm@v4.2.0

    - name: Lint helm
      run: helm lint ./todoapp/

    - name: Template Helm
      run: helm template todoapp ./todoapp/ -f ./todoapp/values.yaml

    - name: Package Helm
      run: helm package ./todoapp

    - name: Upload Helm Artifact
      uses: actions/upload-artifact@v4
      with:
        name: helm-package
        path: ./*.tgz

  deploy-helm:
    name: Deploy helm
    uses: ./.github/workflows/reusable-deployment.yml
    needs: [helm-ci, docker-ci]
    secrets: inherit
    with:
      environment: development
      version: ${{ github.sha }}

  deploy-helm-staging:
    name: Deploy helm staging
    uses: ./.github/workflows/reusable-deployment.yml
    needs: deploy-helm
    secrets: inherit
    with:
      environment: staging
      version: ${{ github.sha }}
      helm-values-path: "./helm-charts/todoapp/values/stg.yaml"
      helm-release-name: todoapp-staging
